//
//  ListViewController.swift
//  WhereIsMyApple
//
//  Created by Raymond Law on 1/8/18.
//  Copyright (c) 2018 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit

protocol ListDisplayLogic: class
{
  func displayFetchStores(viewModel: List.FetchStores.ViewModel)
  func displayLocateStore(viewModel: List.LocateStore.ViewModel)
  func displayLocateStoreAlt(viewModel: List.LocateStoreAlt.ViewModel)
}

class ListViewController: UITableViewController, ListDisplayLogic
{
  var interactor: ListBusinessLogic?
  var router: (NSObjectProtocol & ListRoutingLogic & ListDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ListInteractor()
    let presenter = ListPresenter()
    let router = ListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    fetchStores()
  }
  
  // MARK: Table view
  
  override func numberOfSections(in tableView: UITableView) -> Int
  {
    return 1
  }
  
  override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
  {
    return displayedStores.count
  }
  
  override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
  {
    let displayedStore = displayedStores[indexPath.row]
    var cell = tableView.dequeueReusableCell(withIdentifier: "StoreTableViewCell")
    if cell == nil {
      cell = UITableViewCell(style: .value1, reuseIdentifier: "StoreTableViewCell")
    }
    cell?.textLabel?.text = displayedStore.name
    cell?.detailTextLabel?.text = displayedStore.address
    return cell!
  }
  
  override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)
  {
    let displayedStore = displayedStores[indexPath.row]
    locateStore(displayedStore: displayedStore)
  }
  
  // MARK: Fetch stores
  
  var displayedStores: [List.DisplayedStore] = []
  
  func fetchStores()
  {
    let request = List.FetchStores.Request()
    interactor?.fetchStores(request: request)
  }
  
  func displayFetchStores(viewModel: List.FetchStores.ViewModel)
  {
    displayedStores = viewModel.displayedStores
    tableView.reloadData()
  }
  
  // MARK: Locate store
  
  func locateStore(displayedStore: List.DisplayedStore)
  {
    let request = List.LocateStore.Request(name: displayedStore.name, address: displayedStore.address)
    interactor?.locateStore(request: request)
  }
  
  func displayLocateStore(viewModel: List.LocateStore.ViewModel)
  {
    let placemark = MKPlacemark(coordinate: viewModel.coordinate, addressDictionary: viewModel.addressDictionary)
    let mapItem = List.LocateStore.MapItem(placemark: placemark)
    mapItem.name = viewModel.name
    mapItem.openInMaps(launchOptions: nil)
  }
  
  func displayLocateStoreAlt(viewModel: List.LocateStoreAlt.ViewModel)
  {
    viewModel.mapItem.openInMaps(launchOptions: nil)
  }
}
