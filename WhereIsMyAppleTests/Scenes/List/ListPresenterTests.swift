//
//  ListPresenterTests.swift
//  WhereIsMyApple
//
//  Created by Raymond Law on 1/8/18.
//  Copyright (c) 2018 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import WhereIsMyApple
import XCTest
import MapKit

class ListPresenterTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: ListPresenter!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupListPresenter()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupListPresenter()
  {
    sut = ListPresenter()
  }
  
  // MARK: Test doubles
  
  class ListDisplayLogicSpy: ListDisplayLogic
  {
    var displayFetchStoresCalled = false
    var displayLocateStoreCalled = false
    var displayLocateStoreAltCalled = false
    var displayLocateStoreAltViewModel: List.LocateStoreAlt.ViewModel?
    
    func displayFetchStores(viewModel: List.FetchStores.ViewModel)
    {
      displayFetchStoresCalled = true
    }
    
    func displayLocateStore(viewModel: List.LocateStore.ViewModel)
    {
      displayLocateStoreCalled = true
    }
    
    func displayLocateStoreAlt(viewModel: List.LocateStoreAlt.ViewModel)
    {
      displayLocateStoreAltCalled = true
      displayLocateStoreAltViewModel = viewModel
    }
  }
  
  // MARK: Tests
  
  func testPresentFetchStoresShouldAskViewControllerToDisplayFetchedStores()
  {
    // Given
    let spy = ListDisplayLogicSpy()
    sut.viewController = spy
    
    // When
    let stores: [Store] = [
      Seeds.Stores.clarendon,
      Seeds.Stores.pentagonCity,
      Seeds.Stores.fairOaks,
      Seeds.Stores.tysonsCorner,
      Seeds.Stores.macArthurCenter,
      Seeds.Stores.reston,
      Seeds.Stores.shortPumpTownCenter,
      Seeds.Stores.lynnhavenMall,
      Seeds.Stores.potomacTownCenter
    ]
    let response = List.FetchStores.Response(stores: stores)
    sut.presentFetchStores(response: response)
    
    // Then
    XCTAssertTrue(spy.displayFetchStoresCalled, "presentFetchStores(response:) should ask the view controller to display the fetched stores")
  }
  
  func testPresentLocateStoreShouldAskViewControllerToLocateStoreInMap()
  {
    // Given
    let spy = ListDisplayLogicSpy()
    sut.viewController = spy
    
    // When
    let name = "Tysons Corner"
    let coordinate = CLLocationCoordinate2D(latitude: 38.917623, longitude: -77.222237)
    let response = List.LocateStore.Response(name: name, coordinate: coordinate, addressDictionary: nil)
    sut.presentLocateStore(response: response)
    
    // Then
    XCTAssertTrue(spy.displayLocateStoreCalled, "presentLocateStore(response:) should ask the view controller to locate store in map")
  }
  
  func testPresentLocateStoreAltShouldAskViewControllerToLocateStoreInMap()
  {
    // Given
    let spy = ListDisplayLogicSpy()
    sut.viewController = spy
    
    // When
    let name = "Tysons Corner"
    let coordinate = CLLocationCoordinate2D(latitude: 38.917623, longitude: -77.222237)
    let response = List.LocateStore.Response(name: name, coordinate: coordinate, addressDictionary: nil)
    sut.presentLocateStoreAlt(response: response)
    
    // Then
    XCTAssertTrue(spy.displayLocateStoreAltCalled, "presentLocateStore(response:) should ask the view controller to locate store in map")
    let actualName = spy.displayLocateStoreAltViewModel?.mapItem.name
    XCTAssertEqual(actualName, name, "presentLocateStore(response:) should set the correct name")
    let actualCoordinate = spy.displayLocateStoreAltViewModel?.mapItem.placemark.coordinate
    XCTAssertEqual(actualCoordinate?.latitude, coordinate.latitude, "presentLocateStore(response:) should set the correct latitude")
    XCTAssertEqual(actualCoordinate?.longitude, coordinate.longitude, "presentLocateStore(response:) should set the correct longitude")
  }
}
