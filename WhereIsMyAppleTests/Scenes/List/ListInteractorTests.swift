//
//  ListInteractorTests.swift
//  WhereIsMyApple
//
//  Created by Raymond Law on 1/8/18.
//  Copyright (c) 2018 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import WhereIsMyApple
import XCTest
import MapKit

class ListInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: ListInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupListInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupListInteractor()
  {
    sut = ListInteractor()
  }
  
  // MARK: Test doubles
  
  class ListPresentationLogicSpy: ListPresentationLogic
  {
    var presentFetchStoresCalled = false
    var presentLocateStoreCalled = false
    var presentLocateStoreAltCalled = false
    
    func presentFetchStores(response: List.FetchStores.Response)
    {
      presentFetchStoresCalled = true
    }
    
    func presentLocateStore(response: List.LocateStore.Response)
    {
      presentLocateStoreCalled = true
    }
    
    func presentLocateStoreAlt(response: List.LocateStore.Response)
    {
      presentLocateStoreAltCalled = true
    }
  }
  
  class GeocoderSpy: CLGeocoder
  {
    var geocodeAddressStringCalled = false
    let geocodeAddressStringExpectation = XCTestExpectation(description: "Wait for geocodeAddressString to invoke the completion handler")
    
    override func geocodeAddressString(_ addressString: String, completionHandler: @escaping CLGeocodeCompletionHandler)
    {
      geocodeAddressStringCalled = true
      let placemark = Seeds.placemark
      completionHandler([placemark], nil)
      geocodeAddressStringExpectation.fulfill()
    }
  }
  
  // MARK: Tests
  
  func testFetchStoresShouldAskPresenterToFormatStoresResult()
  {
    // Given
    let spy = ListPresentationLogicSpy()
    sut.presenter = spy
    
    // When
    let request = List.FetchStores.Request()
    sut.fetchStores(request: request)
    
    // Then
    XCTAssertTrue(spy.presentFetchStoresCalled, "fetchStores(request:) should ask the presenter to format the stores result")
  }
  
  func testLocateStoreShouldAskPresenterToFormatLocatedStore()
  {
    // Given
    let spy = ListPresentationLogicSpy()
    sut.presenter = spy
    let geocoderSpy = GeocoderSpy()
    sut.geocoder = geocoderSpy
    
    // When
    let store = Seeds.Stores.tysonsCorner
    let request = List.LocateStore.Request(name: store.name, address: store.address)
    sut.locateStore(request: request)
    wait(for: [geocoderSpy.geocodeAddressStringExpectation], timeout: 10.0)
    
    // Then
    switch sut.dependencyInjection {
    case .method:
      XCTAssertTrue(spy.presentLocateStoreAltCalled, "locateStore(request:) should ask the presenter to format the located store")
    case .extractAndOverrideCall:
      XCTAssertTrue(spy.presentLocateStoreCalled, "locateStore(request:) should ask the presenter to format the located store")
    }
  }
}
