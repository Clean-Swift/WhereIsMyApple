//
//  ListViewControllerTests.swift
//  WhereIsMyApple
//
//  Created by Raymond Law on 1/8/18.
//  Copyright (c) 2018 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import WhereIsMyApple
import XCTest
import MapKit

// MARK: Test doubles

extension List.LocateStore.MapItem
{
  struct Spy
  {
    static var openInMapsCalled = false
  }
  
  override open func openInMaps(launchOptions: [String : Any]? = nil) -> Bool
  {
    Spy.openInMapsCalled = true
    return true
  }
}

class ListViewControllerTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: ListViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    window = UIWindow()
    setupListViewController()
  }
  
  override func tearDown()
  {
    List.LocateStore.MapItem.Spy.openInMapsCalled = false
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupListViewController()
  {
    let bundle = Bundle.main
    let storyboard = UIStoryboard(name: "Main", bundle: bundle)
    sut = storyboard.instantiateViewController(withIdentifier: "ListViewController") as! ListViewController
  }
  
  func loadView()
  {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
  
  class ListBusinessLogicSpy: ListBusinessLogic
  {
    var fetchStoresCalled = false
    var locateStoreCalled = false
    
    func fetchStores(request: List.FetchStores.Request)
    {
      fetchStoresCalled = true
    }
    
    func locateStore(request: List.LocateStore.Request)
    {
      locateStoreCalled = true
    }
  }
  
  class TableViewSpy: UITableView
  {
    var reloadDataCalled = false
    
    override func reloadData()
    {
      reloadDataCalled = true
    }
  }
  
  class MapItemSpy: MKMapItem
  {
    var openInMapsCalled = false
    
    override open func openInMaps(launchOptions: [String : Any]? = nil) -> Bool
    {
      openInMapsCalled = true
      return true
    }
  }
  
  // MARK: Tests
  
  func testShouldFetchStoresWhenViewIsLoaded()
  {
    // Given
    let spy = ListBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    
    // Then
    XCTAssertTrue(spy.fetchStoresCalled, "viewDidLoad() should ask the interactor to fetch stores")
  }
  
  func testDisplayFetchStoresShouldDisplayStoresInTableView()
  {
    // Given
    loadView()
    let tableViewSpy = TableViewSpy()
    sut.tableView = tableViewSpy
    
    // When
    let displayedStores: [List.DisplayedStore] = [
      Seeds.DisplayedStores.clarendon,
      Seeds.DisplayedStores.pentagonCity,
      Seeds.DisplayedStores.fairOaks,
      Seeds.DisplayedStores.tysonsCorner,
      Seeds.DisplayedStores.macArthurCenter,
      Seeds.DisplayedStores.reston,
      Seeds.DisplayedStores.shortPumpTownCenter,
      Seeds.DisplayedStores.lynnhavenMall,
      Seeds.DisplayedStores.potomacTownCenter
    ]
    let viewModel = List.FetchStores.ViewModel(displayedStores: displayedStores)
    sut.displayFetchStores(viewModel: viewModel)
    
    // Then
    XCTAssertTrue(tableViewSpy.reloadDataCalled, "displayFetchStores(viewModel:) should ask the table view to reload")
  }
  
  func testDisplayLocateStoreShouldOpenStoreInAppleMap()
  {
    // Given
    
    // When
    let name = "Tysons Corner"
    let coordinate = CLLocationCoordinate2D(latitude: 38.917623, longitude: -77.222237)
    let viewModel = List.LocateStore.ViewModel(name: name, coordinate: coordinate, addressDictionary: nil)
    sut.displayLocateStore(viewModel: viewModel)
    
    // Then
    XCTAssertTrue(List.LocateStore.MapItem.Spy.openInMapsCalled, "displayLocateStore(viewModel:) should ask the map view to open the store in Apple Maps")
  }
  
  func testDisplayLocateStoreAltShouldOpenStoreInAppleMap()
  {
    // Given
    let placemark = Seeds.placemark
    let mapItemSpy = MapItemSpy(placemark: placemark)
    
    // When
    let viewModel = List.LocateStoreAlt.ViewModel(mapItem: mapItemSpy)
    sut.displayLocateStoreAlt(viewModel: viewModel)
    
    // Then
    XCTAssertTrue(mapItemSpy.openInMapsCalled, "displayLocateStore(viewModel:) should ask the map view to open the store in Apple Maps")
  }
}
